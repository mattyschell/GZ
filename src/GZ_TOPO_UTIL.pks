CREATE OR REPLACE PACKAGE GZ_TOPO_UTIL AUTHID CURRENT_USER   AS
   PROCEDURE PURGE_TOPOLOGY(
      pTGT_SCHEMA IN VARCHAR2,
      pTGT_TOPOLOGY IN VARCHAR2,
      pFT_KEEP      IN VARCHAR2 DEFAULT NULL
   );
   FUNCTION CREATE_TOPOLOGY(
      TGT_SCHEMA IN VARCHAR2,
      TGT_TOPOLOGY IN VARCHAR2,
      TGT_TOLERANCE IN NUMBER,
      TGT_SRID IN NUMBER
   ) RETURN NUMBER;
   PROCEDURE COPY_PRIMITIVES(
      SRC_SCHEMA IN VARCHAR2,
      SRC_TOPOLOGY IN VARCHAR2,
      TGT_SCHEMA IN VARCHAR2,
      TGT_TOPOLOGY IN VARCHAR2
   );
   PROCEDURE CREATE_RELATION_SHELL(
      TGT_SCHEMA IN VARCHAR2,
      TGT_TOPOLOGY IN VARCHAR2
   );
   PROCEDURE CREATE_FEATURE_TABLE(
      SRC_SCHEMA IN VARCHAR2,
      SRC_FTABLE IN VARCHAR2,
      TGT_SCHEMA IN VARCHAR2,
      TGT_FTABLE IN VARCHAR2
   );
   PROCEDURE COPY_FEATURE_TABLE(
      SRC_SCHEMA IN VARCHAR2,
      SRC_FTABLE IN VARCHAR2,
      TGT_TOPOLOGY IN VARCHAR2,
      TGT_SCHEMA IN VARCHAR2,
      TGT_FTABLE IN VARCHAR2,
      TGT_LAYER_ID IN VARCHAR2
   );
   PROCEDURE UPDATE_TOPOLOGY_ID(
      TGT_SCHEMA IN VARCHAR2,
      TGT_FTABLE IN VARCHAR2,
      TOPOLOGY_ID IN NUMBER
   );
   PROCEDURE ADD_RELATION_PARTITION(
      TGT_SCHEMA IN VARCHAR2,
      TGT_TOPOLOGY IN VARCHAR2,
      TGLAYER_ID IN NUMBER
   );
   PROCEDURE COPY_RELATION_DATA(
      SRC_SCHEMA IN VARCHAR2,
      SRC_TOPOLOGY IN VARCHAR2,
      TGT_SCHEMA IN VARCHAR2,
      TGT_TOPOLOGY IN VARCHAR2,
      TGLAYER_ID IN NUMBER
   );
   PROCEDURE REGISTER_FEATURE_TABLE(
      TGT_SCHEMA IN VARCHAR2,
      TGT_TOPOLOGY IN VARCHAR2,
      FEATURE_TABLE IN VARCHAR2,
      TGLAYER_TYPE IN VARCHAR2,
      TGLAYER_ID IN NUMBER,
      CLAYER_ID NUMBER
   );
   PROCEDURE PROCESS_FEATURE(
      SRC_SCHEMA IN VARCHAR2,
      SRC_TOPOLOGY IN VARCHAR2,
      TGT_SCHEMA IN VARCHAR2,
      TGT_TOPOLOGY IN VARCHAR2,
      TOPOLOGY_ID IN NUMBER,
      SRC_FTABLE IN VARCHAR2,
      TGT_FTABLE IN VARCHAR2,
      TGLAYER_ID IN NUMBER,
      TGLAYER_TYPE IN VARCHAR2,
      CLAYER_ID NUMBER
   );
   PROCEDURE INIT_METADATA(
      TGT_SCHEMA IN VARCHAR2,
      TGT_TOPOLOGY IN VARCHAR2
   );
   PROCEDURE VALIDATE_TOPOLOGY(
      TGT_SCHEMA IN VARCHAR2,
      TGT_TOPOLOGY IN VARCHAR2
   );
   FUNCTION VALIDATE_FEATURE_TABLES(
      pSRC_SCHEMA IN VARCHAR2,
      pSRC_TOPOLOGY IN VARCHAR2
   ) RETURN BOOLEAN;
   PROCEDURE COPY_TOPOLOGY(
      pSRC_SCHEMA IN VARCHAR2,
      pSRC_TOPOLOGY IN VARCHAR2,
      pTGT_SCHEMA IN VARCHAR2,
      pTGT_TOPOLOGY IN VARCHAR2,
      pPURGE_TGT_TOPOLOGY IN CHAR DEFAULT 'N',
      pVERIFY_SRC_TOPOLOGY IN CHAR DEFAULT 'Y'
   );   
   PROCEDURE COPY_TOPOLOGY(
      pSRC_SCHEMA IN VARCHAR2,
      pSRC_TOPOLOGY IN VARCHAR2,
      pTGT_SCHEMA IN VARCHAR2,
      pTGT_TOPOLOGY IN VARCHAR2,
      pPURGE_TGT_TOPOLOGY IN CHAR, 
      pVERIFY_SRC_TOPOLOGY IN CHAR,
      pCOPY_FTABLES IN CHAR
   );
   PROCEDURE VALIDATE_TGID(
      pSCHEMA IN VARCHAR2,
      pTOPOLOGY IN VARCHAR2,
      pFTABLE IN VARCHAR2,
      pPK IN VARCHAR2,
      pOUTTABLE IN VARCHAR2,
      pTG_ID IN NUMBER,
      pTGL_ID IN NUMBER
   );
   PROCEDURE VALIDATE_FTABLE(
      pSCHEMA IN VARCHAR2,
      pTOPOLOGY IN VARCHAR2,
      pFTABLE IN VARCHAR2,
      pPK IN VARCHAR2,
      pOUTTABLE IN VARCHAR2
   );
   PROCEDURE REBUILD_INDEXES(
      pTOPOLOGY IN VARCHAR2
   );
   
   PROCEDURE CREATE_INDEXES (
         pSRC_SCHEMA        IN VARCHAR2,
         pSRC_TOPOLOGY    IN VARCHAR2,
         pTGT_TOPOLOGY    IN VARCHAR2
   );
            
   FUNCTION GET_IND_COLUMNS (pSchema        IN VARCHAR2,
                             pTable_name    IN VARCHAR2,
                             pIndexl_name   IN VARCHAR2)
      RETURN VARCHAR2;
         
   PROCEDURE FIX_CnnctByLp_Err(
      pTOPOLOGY IN VARCHAR2,
      pTABLE_NAME IN VARCHAR2,
      pPKCol IN VARCHAR2,
      pPKVal IN NUMBER,
      pSDOTopoGeomCol IN VARCHAR2
   );
   PROCEDURE PURGE_TOPO_AND_TABLES(
      pTOPOLOGY IN VARCHAR2,
      pSCHEMA_NAME IN VARCHAR2
   );
   PROCEDURE DROP_TABLES_WITH_PREFIX(
      pPREFIX IN VARCHAR2,
      pSCHEMA_NAME IN VARCHAR2
   );
   PROCEDURE FIX_RELATION_DOLLAR_INDEXES(
      pTopology IN VARCHAR2
   );
END GZ_TOPO_UTIL;
/

